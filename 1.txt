module.exports = function solveSudoku(matrix) {
    // your solution

    var possible = [true, true, true, true, true, true, true, true, true];

    function checkVertical(j) {
        for (var i = 0; i < 9; i++) {
            if (matrix[i][j] != 0) {
                possible[matrix[i][j]-1] = false;
            }
        }
    }

    function checkHorizontal(i) {
        for (var j = 0; j < 9; j++) {
            if (matrix[i][j] != 0) {
                possible[matrix[i][j]-1] = false;
            }
        }
    }

    function checkRectangle3x3(i, j) {
        var begin_y = Math.floor(i / 3);
        var begin_x = Math.floor(j / 3);
        for (var k = begin_y * 3; k < (begin_y + 1) * 3; k++) {
            for (var l = begin_x * 3; l < (begin_x + 1) * 3; l++) {
                if (matrix[k][l] != 0) {
                    possible[matrix[k][l]-1] = false;
                }
            }
        }
    }

    function checkNeighborHorizontal(i, j) {}


    var count_zeros = 0;
    for (var i = 0; i < 9; i++) {
        for (var j = 0; j < 9; j++) {
            if (matrix[i][j] == 0) {
                count_zeros += 1;
            }
        }
    }

    do {
        for (var i = 0; i < 9; i++) {
            for (var j = 0; j < 9; j++) {
                if (matrix[i][j] == 0) {
                    checkVertical(j);
                    checkHorizontal(i);
                    checkRectangle3x3(i, j);
                    var def = 0;
                    var count = 0;
                    for (var k = 0; k < 9; k++) {
                        if (possible[k]) {
                            def = k + 1;
                            count += 1;
                        }
                    }
                    if (count == 1) {
                        matrix[i][j] = def;
                        count_zeros -= 1;
                    }
                    def = 0;
                    count = 0;
                    var possible = [true, true, true, true, true, true, true, true, true];
                }
            }
        }
    } while (count_zeros != 0)

    return matrix;
}
